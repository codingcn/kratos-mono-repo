// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"go.opentelemetry.io/otel/sdk/trace"
	"kratos-mono-repo/app/bff/interface/internal/biz"
	"kratos-mono-repo/app/bff/interface/internal/conf"
	"kratos-mono-repo/app/bff/interface/internal/data"
	"kratos-mono-repo/app/bff/interface/internal/server"
	"kratos-mono-repo/app/bff/interface/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, auth *conf.Auth, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	db, cleanup, err := data.NewGormClient(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	cmdable := data.NewRedisCmd(confData, logger)
	discovery := data.NewDiscovery(registry)
	userClient := data.NewUserServiceClient(discovery)
	dataData, cleanup2, err := data.NewData(confData, db, cmdable, userClient, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepo := data.NewUserUsecase(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	userService := service.NewUserService(userUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, userService, logger)
	httpServer := server.NewHTTPServer(confServer, auth, userService, logger)
	registrar, cleanup3, err := data.NewRegistrar(registry)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	app := newApp(confServer, logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
